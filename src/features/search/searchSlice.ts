import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchSearchResults } from './searchAPI';

export interface SearchState {
  value: string;
  results: any[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: SearchState = {
  value: '',
  results: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchAsync = createAsyncThunk(
  'counter/fetchCount',
  async (searchTerm: string) => {
    const response = await fetchSearchResults(searchTerm);
    // The value we return becomes the `fulfilled` action payload
    return response.query.search;
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.results = action.payload;
      });
  },
});

export const selectSearchResults = (state: RootState) => state.search.results;

export default searchSlice.reducer;
